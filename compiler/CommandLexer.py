# Generated from Command.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,232,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,3,7,108,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,132,
        8,8,1,9,1,9,1,9,1,9,1,9,3,9,139,8,9,1,10,1,10,5,10,143,8,10,10,10,
        12,10,146,9,10,1,11,1,11,1,11,3,11,151,8,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,3,16,172,8,16,1,17,1,17,1,17,5,17,177,8,17,10,17,12,17,
        180,9,17,1,17,1,17,1,18,1,18,1,18,3,18,187,8,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,21,3,21,198,8,21,1,21,1,21,1,21,4,21,203,
        8,21,11,21,12,21,204,1,21,3,21,208,8,21,1,22,1,22,1,22,5,22,213,
        8,22,10,22,12,22,216,9,22,3,22,218,8,22,1,23,1,23,3,23,222,8,23,
        1,23,1,23,1,24,4,24,227,8,24,11,24,12,24,228,1,24,1,24,0,0,25,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,0,
        29,12,31,13,33,14,35,15,37,0,39,0,41,0,43,16,45,17,47,18,49,19,1,
        0,10,3,0,45,45,58,58,95,95,2,0,65,90,97,122,2,0,34,34,92,92,8,0,
        34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,
        65,70,97,102,1,0,48,57,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,
        45,2,0,9,9,32,32,244,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,68,1,0,0,0,9,73,1,0,
        0,0,11,86,1,0,0,0,13,88,1,0,0,0,15,107,1,0,0,0,17,131,1,0,0,0,19,
        138,1,0,0,0,21,140,1,0,0,0,23,150,1,0,0,0,25,152,1,0,0,0,27,154,
        1,0,0,0,29,156,1,0,0,0,31,159,1,0,0,0,33,171,1,0,0,0,35,173,1,0,
        0,0,37,183,1,0,0,0,39,188,1,0,0,0,41,194,1,0,0,0,43,197,1,0,0,0,
        45,217,1,0,0,0,47,219,1,0,0,0,49,226,1,0,0,0,51,52,5,40,0,0,52,2,
        1,0,0,0,53,54,5,41,0,0,54,4,1,0,0,0,55,56,5,99,0,0,56,57,5,114,0,
        0,57,58,5,101,0,0,58,59,5,97,0,0,59,60,5,116,0,0,60,61,5,101,0,0,
        61,62,5,32,0,0,62,63,5,116,0,0,63,64,5,97,0,0,64,65,5,98,0,0,65,
        66,5,108,0,0,66,67,5,101,0,0,67,6,1,0,0,0,68,69,5,119,0,0,69,70,
        5,105,0,0,70,71,5,116,0,0,71,72,5,104,0,0,72,8,1,0,0,0,73,74,5,100,
        0,0,74,75,5,101,0,0,75,76,5,108,0,0,76,77,5,101,0,0,77,78,5,116,
        0,0,78,79,5,101,0,0,79,80,5,32,0,0,80,81,5,116,0,0,81,82,5,97,0,
        0,82,83,5,98,0,0,83,84,5,108,0,0,84,85,5,101,0,0,85,10,1,0,0,0,86,
        87,5,45,0,0,87,12,1,0,0,0,88,89,3,15,7,0,89,90,5,116,0,0,90,91,5,
        97,0,0,91,92,5,98,0,0,92,93,5,108,0,0,93,94,5,101,0,0,94,14,1,0,
        0,0,95,96,5,99,0,0,96,97,5,114,0,0,97,98,5,101,0,0,98,99,5,97,0,
        0,99,100,5,116,0,0,100,108,5,101,0,0,101,102,5,100,0,0,102,103,5,
        101,0,0,103,104,5,108,0,0,104,105,5,101,0,0,105,106,5,116,0,0,106,
        108,5,101,0,0,107,95,1,0,0,0,107,101,1,0,0,0,108,16,1,0,0,0,109,
        110,5,83,0,0,110,111,5,84,0,0,111,112,5,82,0,0,112,113,5,73,0,0,
        113,114,5,78,0,0,114,132,5,71,0,0,115,116,5,73,0,0,116,117,5,78,
        0,0,117,132,5,84,0,0,118,119,5,66,0,0,119,120,5,79,0,0,120,121,5,
        79,0,0,121,122,5,76,0,0,122,123,5,69,0,0,123,124,5,65,0,0,124,132,
        5,78,0,0,125,126,5,68,0,0,126,127,5,79,0,0,127,128,5,85,0,0,128,
        129,5,66,0,0,129,130,5,76,0,0,130,132,5,69,0,0,131,109,1,0,0,0,131,
        115,1,0,0,0,131,118,1,0,0,0,131,125,1,0,0,0,132,18,1,0,0,0,133,134,
        5,97,0,0,134,135,5,110,0,0,135,139,5,100,0,0,136,137,5,111,0,0,137,
        139,5,114,0,0,138,133,1,0,0,0,138,136,1,0,0,0,139,20,1,0,0,0,140,
        144,3,27,13,0,141,143,3,23,11,0,142,141,1,0,0,0,143,146,1,0,0,0,
        144,142,1,0,0,0,144,145,1,0,0,0,145,22,1,0,0,0,146,144,1,0,0,0,147,
        151,7,0,0,0,148,151,3,25,12,0,149,151,3,27,13,0,150,147,1,0,0,0,
        150,148,1,0,0,0,150,149,1,0,0,0,151,24,1,0,0,0,152,153,2,48,57,0,
        153,26,1,0,0,0,154,155,7,1,0,0,155,28,1,0,0,0,156,157,5,101,0,0,
        157,158,5,113,0,0,158,30,1,0,0,0,159,160,5,110,0,0,160,161,5,101,
        0,0,161,32,1,0,0,0,162,163,5,116,0,0,163,164,5,114,0,0,164,165,5,
        117,0,0,165,172,5,101,0,0,166,167,5,102,0,0,167,168,5,97,0,0,168,
        169,5,108,0,0,169,170,5,115,0,0,170,172,5,101,0,0,171,162,1,0,0,
        0,171,166,1,0,0,0,172,34,1,0,0,0,173,178,5,34,0,0,174,177,3,37,18,
        0,175,177,8,2,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,180,1,0,0,
        0,178,176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,
        0,181,182,5,34,0,0,182,36,1,0,0,0,183,186,5,92,0,0,184,187,7,3,0,
        0,185,187,3,39,19,0,186,184,1,0,0,0,186,185,1,0,0,0,187,38,1,0,0,
        0,188,189,5,117,0,0,189,190,3,41,20,0,190,191,3,41,20,0,191,192,
        3,41,20,0,192,193,3,41,20,0,193,40,1,0,0,0,194,195,7,4,0,0,195,42,
        1,0,0,0,196,198,5,45,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,199,
        1,0,0,0,199,200,3,45,22,0,200,202,5,46,0,0,201,203,7,5,0,0,202,201,
        1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,
        1,0,0,0,206,208,3,47,23,0,207,206,1,0,0,0,207,208,1,0,0,0,208,44,
        1,0,0,0,209,218,5,48,0,0,210,214,7,6,0,0,211,213,7,5,0,0,212,211,
        1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,218,
        1,0,0,0,216,214,1,0,0,0,217,209,1,0,0,0,217,210,1,0,0,0,218,46,1,
        0,0,0,219,221,7,7,0,0,220,222,7,8,0,0,221,220,1,0,0,0,221,222,1,
        0,0,0,222,223,1,0,0,0,223,224,3,45,22,0,224,48,1,0,0,0,225,227,7,
        9,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,
        0,0,0,229,230,1,0,0,0,230,231,6,24,0,0,231,50,1,0,0,0,17,0,107,131,
        138,144,150,171,176,178,186,197,204,207,214,217,221,228,1,6,0,0
    ]

class CommandLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    TABLE_CMD = 7
    TABLE_ACTION = 8
    TYPE = 9
    LOGICAL_OPERATOR = 10
    ATTRNAME = 11
    EQ = 12
    NE = 13
    BOOLEAN = 14
    STRING = 15
    DOUBLE = 16
    INT = 17
    EXP = 18
    WS = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'create table'", "'with'", "'delete table'", 
            "'-'", "'eq'", "'ne'" ]

    symbolicNames = [ "<INVALID>",
            "TABLE_CMD", "TABLE_ACTION", "TYPE", "LOGICAL_OPERATOR", "ATTRNAME", 
            "EQ", "NE", "BOOLEAN", "STRING", "DOUBLE", "INT", "EXP", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "TABLE_CMD", 
                  "TABLE_ACTION", "TYPE", "LOGICAL_OPERATOR", "ATTRNAME", 
                  "ATTR_NAME_CHAR", "DIGIT", "ALPHA", "EQ", "NE", "BOOLEAN", 
                  "STRING", "ESC", "UNICODE", "HEX", "DOUBLE", "INT", "EXP", 
                  "WS" ]

    grammarFileName = "Command.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


